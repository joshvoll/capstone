service:
  name: serverless-routine-app

plugins:
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-iam-roles-per-function

package:
  individually: true


provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    ROUTINE_TABLE: Routines-${self:provider.stage}
    USER_ID_INDEX: userId
    IMAGES_BUCKET: routines-jrc-${self:provider.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ROUTINE_TABLE}
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}/*
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ROUTINE_TABLE}/index/${self:provider.environment.USER_ID_INDEX}


custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

documentation:
    api:
      info:
        version: v1.0.0
        title: ROUTINE API
        description: serverless api for capstone app by josue manuel  rodriguez
    models:
      - name: CreateRequest
        contentType: application/json
        schema: ${file(models/create-request.json)}
      - name: UpdateRequest
        contentType: application/json
        schema: ${file(models/update-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetRoutines:
    handler: src/lambda/http/getRoutines.handler
    events:
      - http:
          method: get
          path: routines
          authorizer: Auth
          cors: true
    iamRoleStatementsName: ${self:service.name}-get-routine-role-${self:provider.stage}
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ROUTINE_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ROUTINE_TABLE}/index/${self:provider.environment.USER_ID_INDEX}

  CreateRoutine:
    handler: src/lambda/http/createRoutine.handler
    events:
      - http:
          method: post
          path: routines
          authorizer: Auth
          cors: true
          documentation:
            summary: create new ROUTINE
            description: create new ROUTINE
            requestModels:
              'application/json': CreateRoutine
    iamRoleStatementsName: ${self:service.name}-create-routine-jrc-role-${self:provider.stage}
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ROUTINE_TABLE}
  
  DeleteRoutine:
    handler: src/lambda/http/deleteRoutine.handler
    events:
      - http:
          method: delete
          path: routines/{routineId}
          authorizer: Auth
          cors: true
    iamRoleStatementsName: ${self:service.name}-delete-routine-jrc-role-${self:provider.stage}
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ROUTINE_TABLE}  

resources:
  Resources:
  
    TodosDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: routineId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: routineId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ROUTINE_TABLE}

    TodoS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_BUCKET}/*'
        Bucket: !Ref TodoS3Bucket
